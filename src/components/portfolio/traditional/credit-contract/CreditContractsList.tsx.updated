import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { CreditContract } from '../../../../types/credit';
import { useCreditContracts } from '../../../../hooks/useCreditContracts';
import { Card } from '../../../ui/Card';
import { Button } from '../../../ui/Button';
import { Badge } from '../../../ui/Badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../../../ui/Table';
import { TableSkeleton } from '../../../ui/TableSkeleton';
import { ErrorDisplay } from '../../../common/ErrorDisplay';
import { useNotification } from '../../../../contexts/NotificationContext';
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger,
  DropdownMenuSeparator
} from '../../../ui/DropdownMenu';
import { ConfirmDialog } from '../../../ui/ConfirmDialog';

// Fonction utilitaire pour le formatage des montants
const formatAmount = (amount: number) => {
  return new Intl.NumberFormat('fr-FR', { 
    style: 'currency', 
    currency: 'XAF',
    maximumFractionDigits: 0
  }).format(amount);
};

// Fonction utilitaire pour le formatage des dates
const formatDate = (dateString: string | undefined) => {
  if (!dateString) return 'N/A';
  const date = new Date(dateString);
  return new Intl.DateTimeFormat('fr-FR', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  }).format(date);
};

// Configuration des status pour l'affichage
const statusConfig: Record<string, { label: string; variant: "success" | "secondary" | "danger" | "warning" }> = {
  'active': { label: 'Actif', variant: 'success' },
  'closed': { label: 'Clôturé', variant: 'secondary' },
  'defaulted': { label: 'En défaut', variant: 'danger' },
  'suspended': { label: 'Suspendu', variant: 'warning' },
  'in_litigation': { label: 'En contentieux', variant: 'danger' }
};

export function CreditContractsList({ portfolioId = 'default' }: { portfolioId?: string }) {
  const { contracts, loading, error, resetToMockData, updateContract, deleteContract } = useCreditContracts(portfolioId);
  const [showConfirmDelete, setShowConfirmDelete] = useState(false);
  const [showConfirmStatusChange, setShowConfirmStatusChange] = useState(false);
  const [contractToAction, setContractToAction] = useState<CreditContract | null>(null);
  const [newStatusToApply, setNewStatusToApply] = useState<'active' | 'closed' | 'defaulted' | 'suspended' | 'in_litigation' | null>(null);
  const { showNotification } = useNotification();
  const navigate = useNavigate();
  
  console.log('CreditContractsList rendering with portfolioId:', portfolioId);
  console.log('Contracts loaded:', contracts?.length || 0);
  
  // Fonction pour changer le statut d'un contrat
  const handleStatusChange = async (contract: CreditContract, newStatus: 'active' | 'closed' | 'defaulted' | 'suspended' | 'in_litigation') => {
    // Si le changement est critique, demander confirmation
    if (newStatus === 'defaulted' || newStatus === 'in_litigation') {
      setContractToAction(contract);
      setNewStatusToApply(newStatus);
      setShowConfirmStatusChange(true);
      return;
    }
    
    // Sinon, appliquer directement
    try {
      await updateContract(contract.id, { ...contract, status: newStatus });
      showNotification(`Le statut du contrat ${contract.reference} a été changé en "${statusConfig[newStatus] ? statusConfig[newStatus].label : newStatus}"`, 'success');
    } catch (error) {
      showNotification(`Erreur lors du changement de statut: ${error}`, 'error');
    }
  };
  
  // Fonction pour confirmer et appliquer le changement de statut
  const confirmStatusChange = async () => {
    if (!contractToAction || !newStatusToApply) return;
    
    try {
      await updateContract(contractToAction.id, { ...contractToAction, status: newStatusToApply });
      showNotification(`Le statut du contrat ${contractToAction.reference} a été changé en "${statusConfig[newStatusToApply] ? statusConfig[newStatusToApply].label : newStatusToApply}"`, 'success');
      
      // Réinitialiser l'état
      setContractToAction(null);
      setNewStatusToApply(null);
      setShowConfirmStatusChange(false);
    } catch (error) {
      showNotification(`Erreur lors du changement de statut: ${error}`, 'error');
    }
  };
  
  // Fonction pour supprimer un contrat
  const handleDeleteContract = async () => {
    if (!contractToAction) return;
    
    try {
      await deleteContract(contractToAction.id);
      showNotification(`Le contrat ${contractToAction.reference} a été supprimé avec succès`, 'success');
      
      // Réinitialiser l'état
      setContractToAction(null);
      setShowConfirmDelete(false);
    } catch (error) {
      showNotification(`Erreur lors de la suppression: ${error}`, 'error');
    }
  };
  
  // Fonction pour générer un PDF du contrat
  const handleGeneratePDF = (contract: CreditContract) => {
    showNotification(`Génération du PDF pour le contrat ${contract.reference} en cours...`, 'info');
    // Ici, vous pourriez implémenter la génération réelle d'un PDF
  };
  
  // Fonction pour afficher l'échéancier d'un contrat
  const handleViewSchedule = (contract: CreditContract) => {
    navigate(`/app/portfolio/${portfolioId}/contracts/${contract.id}/schedule`);
    showNotification(`Navigation vers l'échéancier du contrat ${contract.reference}`, 'info');
  };

  if (loading) {
    return <TableSkeleton columns={6} rows={5} />;
  }
  
  if (error) {
    return (
      <ErrorDisplay 
        errorDetails={error}
        onReset={async () => {
          await resetToMockData();
          showNotification('Données réinitialisées avec succès!', 'success');
        }}
      />
    );
  }

  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold mb-4">Contrats de crédit</h2>
      
      <div className="grid grid-cols-1 gap-6">
        {/* Liste des contrats - prend toute la largeur */}
        <div className="col-span-12 transition-all duration-300">
          <Card className="p-4">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Liste des contrats</h3>
              <div className="flex space-x-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={() => {
                    resetToMockData();
                    showNotification(`Les données ont été réinitialisées pour le portefeuille ID: ${portfolioId}`, 'success');
                  }}
                >
                  Réinitialiser les données
                </Button>
              </div>
            </div>
            
            {portfolioId && portfolioId !== 'qf3081zdd' && (
              <div className="bg-blue-50 p-3 rounded-md mb-4 text-sm">
                <p>Note: Ces données sont générées pour le portefeuille avec l'ID: <strong>{portfolioId}</strong></p>
              </div>
            )}
            
            {contracts.length > 0 ? (
              <div className="overflow-x-auto">
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableHeader>Référence</TableHeader>
                      <TableHeader>Client</TableHeader>
                      <TableHeader>Montant</TableHeader>
                      <TableHeader>Statut</TableHeader>
                      <TableHeader>Date début</TableHeader>
                      <TableHeader>Actions</TableHeader>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {contracts.map((contract) => (
                      <TableRow key={contract.id} 
                        className="cursor-pointer transition-colors duration-150 hover:bg-gray-50"
                        onClick={(e) => {
                          // Ne pas naviguer si on clique sur le menu des actions
                          if ((e.target as HTMLElement).closest('.dropdown-menu-container')) return;
                          console.log("Row clicked for contract:", contract.reference);
                          navigate(`/app/portfolio/${portfolioId}/contracts/${contract.id}`);
                          showNotification(`Navigation vers le contrat ${contract.reference}`, 'info');
                        }}
                      >
                        <TableCell className="font-mono">{contract.reference}</TableCell>
                        <TableCell>{contract.memberName}</TableCell>
                        <TableCell>{formatAmount(contract.amount)}</TableCell>
                        <TableCell>
                          <Badge 
                            variant={
                              (statusConfig[contract.status] && statusConfig[contract.status].variant) 
                                ? statusConfig[contract.status].variant 
                                : "secondary"
                            }
                          >
                            {(statusConfig[contract.status] && statusConfig[contract.status].label) 
                              ? statusConfig[contract.status].label 
                              : contract.status}
                          </Badge>
                        </TableCell>
                        <TableCell>{formatDate(contract.startDate)}</TableCell>
                        <TableCell>
                          <div className="dropdown-menu-container">
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                                  <span className="sr-only">Ouvrir le menu</span>
                                  <svg className="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                                  </svg>
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem onClick={(e) => {
                                  e.stopPropagation();
                                  navigate(`/app/portfolio/${portfolioId}/contracts/${contract.id}`);
                                  showNotification(`Navigation vers le contrat ${contract.reference}`, 'info');
                                }}>
                                  <svg className="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                  </svg>
                                  Voir les détails
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={(e) => {
                                  e.stopPropagation();
                                  handleViewSchedule(contract);
                                }}>
                                  <svg className="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                  </svg>
                                  Voir l'échéancier
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={(e) => {
                                  e.stopPropagation();
                                  handleGeneratePDF(contract);
                                }}>
                                  <svg className="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                                  </svg>
                                  Générer un PDF
                                </DropdownMenuItem>
                                {contract.status === 'active' && (
                                  <>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem onClick={(e) => {
                                      e.stopPropagation();
                                      handleStatusChange(contract, 'suspended');
                                    }}>
                                      <svg className="mr-2 h-4 w-4 text-yellow-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                      </svg>
                                      Suspendre
                                    </DropdownMenuItem>
                                    <DropdownMenuItem onClick={(e) => {
                                      e.stopPropagation();
                                      handleStatusChange(contract, 'closed');
                                    }}>
                                      <svg className="mr-2 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                                      </svg>
                                      Clôturer
                                    </DropdownMenuItem>
                                    <DropdownMenuItem 
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        handleStatusChange(contract, 'defaulted');
                                      }}
                                      className="text-red-600 hover:text-red-800 hover:bg-red-100"
                                    >
                                      <svg className="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                      </svg>
                                      Marquer en défaut
                                    </DropdownMenuItem>
                                    <DropdownMenuItem
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        handleStatusChange(contract, 'in_litigation');
                                      }}
                                      className="text-red-600 hover:text-red-800 hover:bg-red-100"
                                    >
                                      <svg className="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3" />
                                      </svg>
                                      Mettre en contentieux
                                    </DropdownMenuItem>
                                  </>
                                )}
                                {contract.status === 'suspended' && (
                                  <>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem onClick={(e) => {
                                      e.stopPropagation();
                                      handleStatusChange(contract, 'active');
                                    }}>
                                      <svg className="mr-2 h-4 w-4 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                      </svg>
                                      Réactiver
                                    </DropdownMenuItem>
                                  </>
                                )}
                                <DropdownMenuSeparator />
                                <DropdownMenuItem 
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    setContractToAction(contract);
                                    setShowConfirmDelete(true);
                                  }}
                                  className="text-red-600 hover:text-red-800 hover:bg-red-100"
                                >
                                  <svg className="mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                  </svg>
                                  Supprimer
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            ) : (
              <div className="text-center p-6">
                <svg className="w-12 h-12 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <h3 className="mt-2 text-sm font-medium text-gray-900">Aucun contrat trouvé</h3>
                <p className="mt-1 text-sm text-gray-500">Commencez par créer un nouveau contrat de crédit.</p>
                <div className="mt-6">
                  <Button
                    variant="default"
                    onClick={() => {
                      showNotification("Cette fonctionnalité n'est pas encore implémentée", "info");
                    }}
                  >
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Nouveau contrat
                  </Button>
                </div>
              </div>
            )}
          </Card>
        </div>
      </div>
      
      {/* Boîte de dialogue de confirmation pour la suppression */}
      <ConfirmDialog 
        isOpen={showConfirmDelete}
        title="Confirmer la suppression"
        description={`Êtes-vous sûr de vouloir supprimer le contrat ${contractToAction?.reference} ? Cette action est irréversible.`}
        confirmLabel="Supprimer"
        cancelLabel="Annuler"
        onConfirm={handleDeleteContract}
        onClose={() => {
          setContractToAction(null);
          setShowConfirmDelete(false);
        }}
      />
      
      {/* Boîte de dialogue de confirmation pour le changement de statut critique */}
      <ConfirmDialog 
        isOpen={showConfirmStatusChange}
        title="Confirmer le changement de statut"
        description={`Êtes-vous sûr de vouloir changer le statut du contrat ${contractToAction?.reference} en "${newStatusToApply && statusConfig[newStatusToApply] ? statusConfig[newStatusToApply].label : newStatusToApply}" ? Cette action pourrait avoir des conséquences importantes.`}
        confirmLabel="Confirmer"
        cancelLabel="Annuler"
        onConfirm={confirmStatusChange}
        onClose={() => {
          setContractToAction(null);
          setNewStatusToApply(null);
          setShowConfirmStatusChange(false);
        }}
      />
    </div>
  );
}
