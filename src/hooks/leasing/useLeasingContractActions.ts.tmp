import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import { LeasingContract, PaymentStatus, MaintenanceStatus } from '../../types/leasing';
import { leasingDataService } from '../../services/api/leasing/dataService';

export function useLeasingContractActions() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);

  const viewDetails = (contract: LeasingContract) => {
    navigate(`/leasing/contracts/${contract.id}`);
  };

  const activateContract = async (contractId: string) => {
    setLoading(true);
    try {
      const contract = leasingDataService.getLeasingContractById(contractId);
      if (!contract) {
        toast.error('Contrat non trouvé');
        return false;
      }
      
      // Mettre à jour le statut
      const updatedContract = {
        ...contract,
        status: 'active' as const,
        activation_date: new Date().toISOString()
      };
      
      // Sauvegarder dans le localStorage
      leasingDataService.updateLeasingContract(updatedContract);
      
      toast.success('Contrat de leasing activé');
      return true;
    } catch (error) {
      console.error('Erreur lors de l\'activation:', error);
      toast.error('Erreur lors de l\'activation du contrat');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const extendContract = async (contractId: string, additionalMonths: number) => {
    setLoading(true);
    try {
      const contract = leasingDataService.getLeasingContractById(contractId);
      if (!contract) {
        toast.error('Contrat non trouvé');
        return false;
      }
      
      // Calculer la nouvelle date de fin
      const endDate = new Date(contract.end_date);
      endDate.setMonth(endDate.getMonth() + additionalMonths);
      
      // Mettre à jour le contrat
      const updatedContract = {
        ...contract,
        end_date: endDate.toISOString().split('T')[0],
        has_been_extended: true
      };
      
      // Sauvegarder dans le localStorage
      leasingDataService.updateLeasingContract(updatedContract);
      
      toast.success(`Contrat de leasing prolongé de ${additionalMonths} mois`);
      return true;
    } catch (error) {
      console.error('Erreur lors de la prolongation:', error);
      toast.error('Erreur lors de la prolongation du contrat');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const terminateContract = async (contractId: string, reason: string) => {
    setLoading(true);
    try {
      const contract = leasingDataService.getLeasingContractById(contractId);
      if (!contract) {
        toast.error('Contrat non trouvé');
        return false;
      }
      
      // Mettre à jour le statut
      const updatedContract = {
        ...contract,
        status: 'terminated' as const,
        termination_date: new Date().toISOString(),
        termination_reason: reason
      };
      
      // Sauvegarder dans le localStorage
      leasingDataService.updateLeasingContract(updatedContract);
      
      toast.success('Contrat de leasing résilié');
      return true;
    } catch (error) {
      console.error('Erreur lors de la résiliation:', error);
      toast.error('Erreur lors de la résiliation du contrat');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const recordPayment = async (contractId: string, amount: number, date: string) => {
    setLoading(true);
    try {
      const contract = leasingDataService.getLeasingContractById(contractId);
      if (!contract) {
        toast.error('Contrat non trouvé');
        return false;
      }
      
      // Mettre à jour le contrat avec le nouveau paiement
      const updatedContract = {
        ...contract,
        payments: [
          ...(contract.payments || []),
          {
            id: `payment-${Date.now()}`,
            amount,
            date,
            status: 'completed' as PaymentStatus
          }
        ],
        last_payment_date: date,
        // Calculer la prochaine date de facturation (1 mois après la dernière)
        nextInvoiceDate: new Date(new Date(date).setMonth(new Date(date).getMonth() + 1)).toISOString().split('T')[0]
      };
      
      // Sauvegarder dans le localStorage
      leasingDataService.updateLeasingContract(updatedContract);
      
      toast.success('Paiement enregistré avec succès');
      return true;
    } catch (error) {
      console.error('Erreur lors de l\'enregistrement du paiement:', error);
      toast.error('Erreur lors de l\'enregistrement du paiement');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const updateMaintenanceStatus = async (contractId: string, hasMaintenanceIssue: boolean, maintenanceNotes?: string) => {
    setLoading(true);
    try {
      const contract = leasingDataService.getLeasingContractById(contractId);
      if (!contract) {
        toast.error('Contrat non trouvé');
        return false;
      }
      
      // Mettre à jour le statut de maintenance
      const updatedContract = {
        ...contract,
        maintenance_status: (hasMaintenanceIssue ? 'requires_attention' : 'ok') as MaintenanceStatus,
        maintenance_notes: maintenanceNotes || contract.maintenance_notes,
        maintenance_last_updated: new Date().toISOString()
      };
      
      // Sauvegarder dans le localStorage
      leasingDataService.updateLeasingContract(updatedContract);
      
      toast.success('Statut de maintenance mis à jour');
      return true;
    } catch (error) {
      console.error('Erreur lors de la mise à jour de la maintenance:', error);
      toast.error('Erreur lors de la mise à jour du statut de maintenance');
      return false;
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    contracts: leasingDataService.getLeasingContracts(), // Toujours retourner les données à jour
    viewDetails,
    activateContract,
    extendContract,
    terminateContract,
    recordPayment,
    updateMaintenanceStatus
  };
}
